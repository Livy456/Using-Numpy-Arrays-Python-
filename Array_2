# make sure to execute this cell so that your function is defined
# you must re-run this cell any time you make a change to this function
import numpy as np
def evolve_heat_slow(u):
    """ Given a 2D array of heat-values (at fixed boundary), produces
        the new heat distribution after one iteration of the finite 
        difference method.
        
        Parameters
        ----------
        u : numpy.ndarray shape=(M, N)
            An MxN array of heat values at time-step t-1.
            (M and N are both at -least 2)
        
        Returns
        -------
        numpy.ndarray, shape=(M, N)
            An MxN array of heat values at time-step t.
        """       
    # student code goes here
    arr = np.copy(u)
    for m in range(len(u)):
        for n in range(len(u[i])):
            if m == 0 or m == (len(u) - 1) or n == 0 or n == (len(u[m]) - 1):
                continue
            else:
                arr[m][n] = (u[m + 1][n] + u[m - 1][n] + u[m][n + 1] + u[m][n - 1]) / 4
    return (arr)
vim: syntax=python
